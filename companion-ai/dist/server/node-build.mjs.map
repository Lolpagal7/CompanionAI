{"version":3,"file":"node-build.mjs","sources":["../../server/routes/demo.ts","../../server/routes/api-proxy.ts","../../server/index.ts","../../server/node-build.ts"],"sourcesContent":["import { RequestHandler } from \"express\";\nimport { DemoResponse } from \"@shared/api\";\n\nexport const handleDemo: RequestHandler = (req, res) => {\n  const response: DemoResponse = {\n    message: \"Hello from Express server\",\n  };\n  res.status(200).json(response);\n};\n","import { Request, Response } from 'express';\r\n\r\n// Secure proxy for HuggingFace API calls\r\nexport async function handleHuggingFaceProxy(req: Request, res: Response) {\r\n  try {\r\n    const { message, imageFile } = req.body;\r\n    const HF_TOKEN = process.env.HF_TOKEN; // Server-side only\r\n    const GRADIO_SPACE_URL = process.env.GRADIO_SPACE_URL;\r\n\r\n    if (!HF_TOKEN) {\r\n      return res.status(500).json({ error: 'HF_TOKEN not configured' });\r\n    }\r\n\r\n    // Make the API call from server-side (hides the token)\r\n    const response = await fetch(`${GRADIO_SPACE_URL}/call/predict`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Authorization': `Bearer ${HF_TOKEN}`,\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        data: [message, imageFile]\r\n      })\r\n    });\r\n\r\n    const result = await response.json();\r\n    res.json(result);\r\n\r\n  } catch (error) {\r\n    console.error('HuggingFace proxy error:', error);\r\n    res.status(500).json({ error: 'Internal server error' });\r\n  }\r\n}\r\n\r\n// Secure proxy for EmailJS (though EmailJS is less sensitive)\r\nexport async function handleEmailProxy(req: Request, res: Response) {\r\n  try {\r\n    const { templateData, templateType } = req.body;\r\n    \r\n    // Use server-side EmailJS credentials\r\n    const EMAILJS_USER_ID = process.env.EMAILJS_USER_ID;\r\n    const EMAILJS_SERVICE_ID = process.env.EMAILJS_SERVICE_ID;\r\n    \r\n    let templateId;\r\n    switch (templateType) {\r\n      case 'contact':\r\n        templateId = process.env.EMAILJS_TEMPLATE_ID;\r\n        break;\r\n      case 'mental-health':\r\n        templateId = process.env.MENTAL_HEALTH_TEMPLATE_ID;\r\n        break;\r\n      default:\r\n        return res.status(400).json({ error: 'Invalid template type' });\r\n    }\r\n\r\n    // Make EmailJS call from server (hides credentials)\r\n    const response = await fetch('https://api.emailjs.com/api/v1.0/email/send', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        service_id: EMAILJS_SERVICE_ID,\r\n        template_id: templateId,\r\n        user_id: EMAILJS_USER_ID,\r\n        template_params: templateData\r\n      })\r\n    });\r\n\r\n    if (response.ok) {\r\n      res.json({ success: true });\r\n    } else {\r\n      res.status(400).json({ error: 'Email sending failed' });\r\n    }\r\n\r\n  } catch (error) {\r\n    console.error('Email proxy error:', error);\r\n    res.status(500).json({ error: 'Internal server error' });\r\n  }\r\n}\r\n","import express from \"express\";\nimport cors from \"cors\";\nimport { handleDemo } from \"./routes/demo\";\nimport { handleHuggingFaceProxy, handleEmailProxy } from \"./routes/api-proxy\";\n\nexport function createServer() {\n  const app = express();\n\n  // Middleware\n  app.use(cors());\n  app.use(express.json({ limit: '10mb' })); // Increased for image uploads\n  app.use(express.urlencoded({ extended: true }));\n\n  // Example API routes\n  app.get(\"/api/ping\", (_req, res) => {\n    res.json({ message: \"Hello from Express server v2!\" });\n  });\n\n  app.get(\"/api/demo\", handleDemo);\n\n  // Secure proxy routes (hide API keys on server-side)\n  app.post(\"/api/huggingface\", handleHuggingFaceProxy);\n  app.post(\"/api/email\", handleEmailProxy);\n\n  return app;\n}\n","import path from \"path\";\nimport { createServer } from \"./index\";\nimport * as express from \"express\";\n\nconst app = createServer();\nconst port = process.env.PORT || 3000;\n\n// In production, serve the built SPA files\nconst __dirname = import.meta.dirname;\nconst distPath = path.join(__dirname, \"../spa\");\n\n// Serve static files\napp.use(express.static(distPath));\n\n// Handle React Router - serve index.html for all non-API routes\napp.get(\"*\", (req, res) => {\n  // Don't serve index.html for API routes\n  if (req.path.startsWith(\"/api/\") || req.path.startsWith(\"/health\")) {\n    return res.status(404).json({ error: \"API endpoint not found\" });\n  }\n\n  res.sendFile(path.join(distPath, \"index.html\"));\n});\n\napp.listen(port, () => {\n  console.log(`Fusion Starter server running on port ${port}`);\n  console.log(`Frontend: http://localhost:${port}`);\n  console.log(`API: http://localhost:${port}/api`);\n});\n\n// Graceful shutdown\nprocess.on(\"SIGTERM\", () => {\n  console.log(\"Received SIGTERM, shutting down gracefully\");\n  process.exit(0);\n});\n\nprocess.on(\"SIGINT\", () => {\n  console.log(\"Received SIGINT, shutting down gracefully\");\n  process.exit(0);\n});\n"],"names":["app","express"],"mappings":"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"}